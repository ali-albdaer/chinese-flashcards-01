use std::collections::HashMap;
use rand::Rng;
use yew::prelude::*;
use web_sys::{HtmlSelectElement, HtmlInputElement};

#[derive(Clone, PartialEq)]
struct Card {
    character: String,
    pinyin: String,
    english: String,
    example_chinese: String,
    example_pinyin: String,
    example_english: String,
    radicals: Vec<String>,
}

struct App {
    link: ComponentLink<Self>,
    decks: HashMap<String, Vec<Card>>,
    current_deck: String,
    cards: Vec<Card>,
    current_card_idx: usize,
    show_back: bool,
    // options to toggle fields on back
    show_pinyin: bool,
    show_english: bool,
    show_example_sentence: bool,
    show_example_pinyin: bool,
    show_example_english: bool,
    show_radicals: bool,
}

enum Msg {
    Flip,
    Next,
    Remove,
    Shuffle,
    SelectDeck(String),
    TogglePinyin(bool),
    ToggleEnglish(bool),
    ToggleExampleSentence(bool),
    ToggleExamplePinyin(bool),
    ToggleExampleEnglish(bool),
    ToggleRadicals(bool),
}

impl Component for App {
    type Message = Msg;
    type Properties = ();

    fn create(ctx: &Context<Self>) -> Self {
        let mut decks: HashMap<String, Vec<Card>> = HashMap::new();

        // Example deck HSK3+ with one card
        decks.insert(
            "HSK3".to_string(),
            vec![
                Card {
                    character: "学习".to_string(),
                    pinyin: "xué xí".to_string(),
                    english: "to study; to learn".to_string(),
                    example_chinese: "我喜欢学习中文。".to_string(),
                    example_pinyin: "Wǒ xǐ huān xué xí zhōng wén.".to_string(),
                    example_english: "I like studying Chinese.".to_string(),
                    radicals: vec!["⺍".to_string(), "子".to_string()],
                },
                Card {
                    character: "朋友".to_string(),
                    pinyin: "péng you".to_string(),
                    english: "friend".to_string(),
                    example_chinese: "他是我的好朋友。".to_string(),
                    example_pinyin: "Tā shì wǒ de hǎo péng you.".to_string(),
                    example_english: "He is my good friend.".to_string(),
                    radicals: vec!["月".to_string(), "又".to_string()],
                },
            ],
        );

        let current_deck = "HSK3".to_string();
        let cards = decks.get(&current_deck).unwrap().to_vec();

        Self {
            link: ctx.link().clone(),
            decks,
            current_deck,
            cards,
            current_card_idx: 0,
            show_back: false,
            show_pinyin: true,
            show_english: true,
            show_example_sentence: true,
            show_example_pinyin: true,
            show_example_english: true,
            show_radicals: true,
        }
    }

    fn update(&mut self, ctx: &Context<Self>, msg: Self::Message) -> bool {
        match msg {
            Msg::Flip => {
                self.show_back = !self.show_back;
                true
            }
            Msg::Next => {
                self.show_back = false;
                if self.cards.is_empty() {
                    return true;
                }
                self.current_card_idx = (self.current_card_idx + 1) % self.cards.len();
                true
            }
            Msg::Remove => {
                if !self.cards.is_empty() {
                    self.cards.remove(self.current_card_idx);
                    if self.current_card_idx >= self.cards.len() && !self.cards.is_empty() {
                        self.current_card_idx = 0;
                    }
                }
                self.show_back = false;
                true
            }
            Msg::Shuffle => {
                let mut rng = rand::thread_rng();
                let len = self.cards.len();
                for i in (1..len).rev() {
                    let j = rng.gen_range(0..=i);
                    self.cards.swap(i, j);
                }
                self.current_card_idx = 0;
                self.show_back = false;
                true
            }
            Msg::SelectDeck(name) => {
                if let Some(cards) = self.decks.get(&name) {
                    self.current_deck = name.clone();
                    self.cards = cards.to_vec();
                    self.current_card_idx = 0;
                    self.show_back = false;
                    true
                } else {
                    false
                }
            }
            Msg::TogglePinyin(value) => {
                self.show_pinyin = value;
                true
            }
            Msg::ToggleEnglish(value) => {
                self.show_english = value;
                true
            }
            Msg::ToggleExampleSentence(value) => {
                self.show_example_sentence = value;
                true
            }
            Msg::ToggleExamplePinyin(value) => {
                self.show_example_pinyin = value;
                true
            }
            Msg::ToggleExampleEnglish(value) => {
                self.show_example_english = value;
                true
            }
            Msg::ToggleRadicals(value) => {
                self.show_radicals = value;
                true
            }
        }
    }

    fn view(&self, ctx: &Context<Self>) -> Html {
        let card = self.cards.get(self.current_card_idx);

        html! {
            <div style="max-width:600px;margin:auto;padding:1em;font-family:sans-serif;">
                <h1>{ "Chinese Flashcards" }</h1>

                // Deck selector
                <select onchange={ctx.link().callback(|e: Event| {
                    let select = e.target_unchecked_into::<HtmlSelectElement>();
                    Msg::SelectDeck(select.value())
                })}>
                    { for self.decks.keys().map(|deck| {
                        let selected = *deck == self.current_deck;
                        html! {
                            <option selected={selected}>{ deck }</option>
                        }
                    }) }
                </select>

                // Toggle options
                <div style="margin:0.5em 0;">
                    <label><input type="checkbox" checked={self.show_pinyin} onchange={ctx.link().callback(|e:Event| Msg::TogglePinyin(e.target_unchecked_into::<HtmlInputElement>().checked()))}/>{"Show Pinyin"}</label>
                    <label style="margin-left:10px;"><input type="checkbox" checked={self.show_english} onchange={ctx.link().callback(|e:Event| Msg::ToggleEnglish(e.target_unchecked_into::<HtmlInputElement>().checked()))}/>{"Show English"}</label>
                    <label style="margin-left:10px;"><input type="checkbox" checked={self.show_example_sentence} onchange={ctx.link().callback(|e:Event| Msg::ToggleExampleSentence(e.target_unchecked_into::<HtmlInputElement>().checked()))}/>{"Show Example Sentence"}</label>
                    <label style="margin-left:10px;"><input type="checkbox" checked={self.show_example_pinyin} onchange={ctx.link().callback(|e:Event| Msg::ToggleExamplePinyin(e.target_unchecked_into::<HtmlInputElement>().checked()))}/>{"Show Example Pinyin"}</label>
                    <label style="margin-left:10px;"><input type="checkbox" checked={self.show_example_english} onchange={ctx.link().callback(|e:Event| Msg::ToggleExampleEnglish(e.target_unchecked_into::<HtmlInputElement>().checked()))}/>{"Show Example English"}</label>
                    <label style="margin-left:10px;"><input type="checkbox" checked={self.show_radicals} onchange={ctx.link().callback(|e:Event| Msg::ToggleRadicals(e.target_unchecked_into::<HtmlInputElement>().checked()))}/>{"Show Radicals"}</label>
                </div>

                <div style="border:1px solid #ccc; padding:1em; min-height:200px; cursor:pointer;" onclick={ctx.link().callback(|_| Msg::Flip)}>
                    { if let Some(card) = card {
                        if !self.show_back {
                            html! {
                                <div style="font-size:3em; text-align:center;">{ &card.character }</div>
                            }
                        } else {
                            html! {
                                <div>
                                    { if self.show_pinyin { html!{ <p><b>{"Pinyin: "}</b>{ &card.pinyin }</p> } } else { html!{} } }
                                    { if self.show_english { html!{ <p><b>{"English: "}</b>{ &card.english }</p> } } else { html!{} } }
                                    { if self.show_example_sentence { html!{ <p>{ &card.example_chinese }</p> } } else { html!{} } }
                                    { if self.show_example_pinyin { html!{ <p><i>{ &card.example_pinyin }</i></p> } } else { html!{} } }
                                    { if self.show_example_english { html!{ <p>{ &card.example_english }</p> } } else { html!{} } }
                                    { if self.show_radicals {
                                        html! {
                                            <p><b>{"Radicals: "}</b>{ card.radicals.join(", ") }</p>
                                        }
                                    } else { html!{} } }
                                </div>
                            }
                        }
                    } else {
                        html!{ <p>{ "No cards in this deck." }</p> }
                    }}
                </div>

                <div style="margin-top:1em;">
                    <button onclick={ctx.link().callback(|_| Msg::Next)} disabled={self.cards.is_empty()}>{ "Next" }</button>
                    <button onclick={ctx.link().callback(|_| Msg::Remove)} disabled={self.cards.is_empty()} style="margin-left:1em;">{ "Remove" }</button>
                    <button onclick={ctx.link().callback(|_| Msg::Shuffle)} disabled={self.cards.is_empty()} style="margin-left:1em;">{ "Shuffle" }</button>
                </div>
            </div>
        }
    }
}

fn main() {
    yew::Renderer::<App>::new().render();
}
